# from profilehooks import timecall

import sys


def count_trailing_zeros(x):
    """
    :param x: x < 2**10000, yeap, this freakingly huge number
    :return: number of trailing zeros from RIGHT site of binary representation
    """

    if x == 0:
        return -10
    n = 0

    if x & 0x
        n += 5000
        x >>= 5000

    if x & 0x
        n += 2500
        x >>= 2500

    if x & 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0:
        n += 1250
        x >>= 1250

    if x & 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0:
        n += 625
        x >>= 625

    if x & 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0:
        n += 312
        x >>= 312

    # 313
    if x & 0x0000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0:
        n += 156
        x >>= 156

    # 157
    if x & 0x00000000000000000000FFFFFFFFFFFFFFFFFFFF == 0:
        n += 80
        x >>= 80

    # 77
    if x & 0x000000001FFFFFFFFFFF == 0:
        n += 45
        x >>= 45

    #
    if x & 0x00000000FFFFFFFF == 0:
        n += 32
        x >>= 32
    if x & 0x0000FFFF == 0:
        n += 16
        x >>= 16
    if x & 0x000000FF == 0:
        n += 8
        x >>= 8
    if x & 0x0000000F == 0:
        n += 4
        x >>= 4
    if x & 0x00000003 == 0:
        n += 2
        x >>= 2
    if x & 0x00000001 == 0:
        n += 1
    return n


# @timecall
def count_leading_zeros(x):
    """
    :param x: x < 2**10000,  yeap, this freakingly huge number
    :return: number of leading zeros from LEFT site of binary representation
    """
    if x == 0:
        return -10

    n = 10000
    y = x >> 5000
    if y != 0:
        x = y
        n = n - 5000

    y = x >> 2500
    if y != 0:
        n = n - 2500
        x = y

    y = x >> 1250
    if y != 0:
        n = n - 1250
        x = y

    y = x >> 625
    if y != 0:
        n = n - 625
        x = y

    y = x >> 313
    if y != 0:
        n = n - 313
        x = y

    y = x >> 312
    if y != 0:
        n = n - 312
        x = y

    y = x >> 156
    if y != 0:
        n = n - 156
        x = y

    y = x >> 78
    if y != 0:
        n = n - 78
        x = y

    # 77
    y = x >> 39
    if y != 0:
        n = n - 39
        x = y

    y = x >> 20
    if y != 0:
        n = n - 20
        x = y

    y = x >> 19
    if y != 0:
        n = n - 19
        x = y

    y = x >> 10
    if y != 0:
        n = n - 10
        x = y

    y = x >> 9
    if y != 0:
        n = n - 9
        x = y

    y = x >> 5
    if y != 0:
        n = n - 5
        x = y

    y = x >> 4
    if y != 0:
        n = n - 4
        x = y

    y = x >> 2
    if y != 0:
        n = n - 2
        x = y

    y = x >> 1
    if y != 0:
        return n - 2
    return n - x


def count_set_bit(n):
    cnt = 0
    while n:
        cnt += n & 1
        n >>= 1

    return cnt

#
# last_one = count_trailing_zeros(2**9999+2)
# first_one = count_leading_zeros(2**9999+2)
#
# print last_one, first_one, count_set_bit(2**9999+2)
#
# last_one = count_trailing_zeros(2**100)
# first_one = count_leading_zeros(2**100)
#
# print last_one, first_one, count_set_bit(2**100)

# print wtf_64(2**32)
# print count_leading_zeros(2**32)

@timecall
def test_case_1():
    matrix_size = 10000
    all_ored = 0

    for x in xrange(matrix_size):
        new_num = 2**x
        last_one = count_trailing_zeros(new_num)
        first_one = count_leading_zeros(new_num)
        idx = first_one + last_one + 1 == 10000
        if not idx:
            print "WaS here?", x, new_num, last_one, first_one
            break
        else:
            all_ored = all_ored | new_num   # ???

    wtf = count_set_bit(all_ored)
    print wtf
    if wtf == matrix_size:
        print(1)
    else:
        print(0)

#test_case_1()


if __name__ == '__main__':

    num_test_cases = int(sys.stdin.readline().strip())

    while num_test_cases:
        matrix_size = int(sys.stdin.readline().strip())

        all_ored = 0

        cnt = 0
        should_skip_to_next = False
        while cnt != matrix_size:
            cnt += 1
            new_num = int(sys.stdin.readline().strip())

            if should_skip_to_next:
                continue

            last_one = count_trailing_zeros(new_num)

            first_one = count_leading_zeros(new_num)

            # print first_one, last_one, "NUM:", new_num

            idx = first_one + last_one + 1 == 10000
            if not idx:
                should_skip_to_next = True
            else:
                all_ored = all_ored | new_num   # ???

        if not should_skip_to_next:
            wtf = count_set_bit(all_ored)
            if wtf == matrix_size:
                print(1)
            else:
                print(0)
        else:
            print(0)

        num_test_cases -= 1
